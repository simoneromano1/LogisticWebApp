// <auto-generated />
using System;
using LogisticWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogisticWebApp.Migrations
{
    [DbContext(typeof(LogisticDbContext))]
    [Migration("20250325153727_Renaming")]
    partial class Renaming
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("LogisticWebApp.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Clienti");
                });

            modelBuilder.Entity("LogisticWebApp.Models.Corriere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Corrieri");
                });

            modelBuilder.Entity("LogisticWebApp.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Commento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataFeedback")
                        .HasColumnType("TEXT");

                    b.Property<int>("SpedizioneId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Valutazione")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SpedizioneId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("LogisticWebApp.Models.Notifica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataNotifica")
                        .HasColumnType("TEXT");

                    b.Property<string>("Messaggio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SpedizioneId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatoNotifica")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("SpedizioneId");

                    b.ToTable("Notifiche");
                });

            modelBuilder.Entity("LogisticWebApp.Models.Spedizione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorriereId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destinatario")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdCliente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdCorriere")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndirizzoDestinazione")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IndirizzoPartenza")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mittente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RichiesteSpeciali")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Stato")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoMerce")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CorriereId");

                    b.ToTable("Spedizioni");
                });

            modelBuilder.Entity("LogisticWebApp.Models.Feedback", b =>
                {
                    b.HasOne("LogisticWebApp.Models.Spedizione", "Spedizione")
                        .WithOne("Feedback")
                        .HasForeignKey("LogisticWebApp.Models.Feedback", "SpedizioneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spedizione");
                });

            modelBuilder.Entity("LogisticWebApp.Models.Notifica", b =>
                {
                    b.HasOne("LogisticWebApp.Models.Cliente", "Cliente")
                        .WithMany("Notifiche")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogisticWebApp.Models.Spedizione", "Spedizione")
                        .WithMany("Notifiche")
                        .HasForeignKey("SpedizioneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Spedizione");
                });

            modelBuilder.Entity("LogisticWebApp.Models.Spedizione", b =>
                {
                    b.HasOne("LogisticWebApp.Models.Cliente", "Cliente")
                        .WithMany("Spedizioni")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogisticWebApp.Models.Corriere", "Corriere")
                        .WithMany("Spedizioni")
                        .HasForeignKey("CorriereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Corriere");
                });

            modelBuilder.Entity("LogisticWebApp.Models.Cliente", b =>
                {
                    b.Navigation("Notifiche");

                    b.Navigation("Spedizioni");
                });

            modelBuilder.Entity("LogisticWebApp.Models.Corriere", b =>
                {
                    b.Navigation("Spedizioni");
                });

            modelBuilder.Entity("LogisticWebApp.Models.Spedizione", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("Notifiche");
                });
#pragma warning restore 612, 618
        }
    }
}
